<?xml version="1.0" encoding="iso-8859-1"?>

<TuningRoot>
    <Instance instance_type="interaction" class="CraftingPhaseCreateObjectInSlotSuperInteraction" module="crafting.crafting_interactions" muid="13C14AE463B0313C" description="The Sim creates an object in a slot as part of a crafting process." instance_needs_reference="True" instance_subclasses_only="False" parents="CraftingPhaseCreateObjectSuperInteraction, SuperInteraction, Interaction" path="Interactions\Descriptions" use_guid_for_reference="True">
        <Tunable type="bool" name="ignore_object_placmenent_verification" class="Tunable" default="False" display="Ignore Object Placmenent Verification" muid="7C77407EB80A914A" description="If enabled, when parenting the object at the end of crafting&#xA;process the placement of the object will ignore verification&#xA;like slot validation and slot availability.  &#xA;This is valid to tune ONLY if we are guaranteeing this phase&#xA;of the crafting process will delete the ico, since if its not&#xA;deleted, on  save load we will have two object on the same spot &#xA;and build buy will push one to the household inventory.&#xA;An example of a valid use case for this is the pumpkin carving&#xA;station where the ico is a carved generic pumpking and we want&#xA;to replace it for the final product on the same slot." Deprecated="False" filter="0" group="General" />

        <TunableTuple name="parenting_element" class="TunableParentObjectElement" display="Parenting Element" muid="AFF474143FBA39B2" description="Use this element to instruct the game where the newly-created&#xA;object should go.  The constraint to ensure the slot is empty&#xA;will be created automatically." Deprecated="False" filter="0" group="General">
            <Tunable type="bool" name="_check_part_owner" class="Tunable" default="False" display="Check Part Owner" muid="FFB966F1A9FC3C1B" description="If enabled and parent object is a part, the test will be run on&#xA;the part owner instead." Deprecated="False" filter="0" group="General" />
            <TunableEnum type="ParticipantType" name="_parent_object" class="TunableEnumEntry" default="Object" display="Parent Object" muid="CCB7D137927387AA" static_entries="interactions.ParticipantType" description="The participant of an interaction to which an object will be&#xA;parented." Deprecated="False" filter="0" group="General" />
            <TunableVariant type="None" name="_parent_slot" class="TunableVariant" default="none" display="Parent Slot" muid="979ECEBAA32AF5AD" description="The slot on the parent object where the child object should go. This&#xA;may be either the exact name of a bone on the parent object or a&#xA;slot type, in which case the first empty slot of the specified type&#xA;in which the child object fits will be used." Deprecated="False" filter="0" group="General">
                <Tunable type="str" name="by_name" class="Tunable" default="_ctnm_" display="By Name" muid="392B8EE5872CE6D" description="The exact name of a slot on the parent object in which the child&#xA;object should go.  No placement validation will be done on this&#xA;slot, as long as it is empty the child will always be placed&#xA;there.  This should only be used on slots the player isn't&#xA;allowed to use in build mode, as in the original design for the&#xA;service slots on the bar, or by GPEs testing out functionality&#xA;before modelers and designers have settled on slot types and&#xA;names for a particular design." Deprecated="False" filter="0" group="General" />
                <Tunable type="slot_type" name="by_reference" class="TunableReference" display="By Reference" muid="FCF2D682FE578669" description="A particular slot type in which the child object should go.  The&#xA;first empty slot found on the parent of the specified type in&#xA;which the child object fits will be used.  If no such slot is&#xA;found, the parenting will not occur and the interaction will be&#xA;canceled." allow_none="False" Deprecated="False" filter="0" group="General" />
                <Tunable name="none" class="TunableExistance" display="None" muid="72C21A4829D3886F" />
            </TunableVariant>
            <TunableTuple name="success_chance" class="TunableSuccessChance" display="Success Chance" muid="C77FB235D9D7F06C" description="The percentage chance that this action will be applied." Deprecated="False" filter="0" group="General">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" display="Base Chance" muid="A136638A00DD6B3F" min="0" max="100" description="The basic chance of success." Deprecated="False" filter="0" group="General" />
                <TunableList name="multipliers" class="TunableList" display="Multipliers" muid="5F6415C7C5943EAE" description="A list of multipliers to apply to base_chance." Deprecated="False" filter="0" group="General">
                    <TunableTuple class="TunableTuple" muid="2DCAEA3F806A8D45" Deprecated="False" filter="0" group="General">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" display="Multiplier" muid="B9371C5101255EAE" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning" Deprecated="False" filter="0" group="General" />
                        <TdescFragTag name="tests" class="TunableTestSet" display="Tests" muid="AAE05521F969E7C9" description="A series of tests that must pass in order for multiplier to&#xA;be applied." filter="0" group="General" />
                    </TunableTuple>
                </TunableList>
            </TunableTuple>
            <TunableVariant type="None" name="timing" class="TunableVariant" default="at_end" display="Timing" muid="3564B5D3B683C272" description="Determines the exact timing of the behavior, either at the beginning&#xA;of an interaction, the end, or when an xevt occurs in an animation&#xA;played as part of the interaction." Deprecated="False" filter="0" group="General">
                <TunableTuple name="at_beginning" class="TunableTuple" display="At Beginning" muid="A65287BEBFF8CFF9" description="The behavior should occur at the very beginning of the&#xA;interaction.  It will not be tightly synchronized visually with&#xA;animation.  This isn't a very common use case and would most&#xA;likely be used in an immediate interaction or to change hidden&#xA;state that is used for bookkeeping rather than visual&#xA;appearance." Deprecated="False" filter="0" group="General">
                    <TunableVariant type="None" name="offset_time" class="OptionalTunable" default="disabled" display="Offset Time" muid="E8D0102B1BEDA39" description="If enabled, the interaction will wait this amount of time&#xA;after the beginning before running the element.&#xA;&#xA;Only use this if absolutely necessary. Better alternatives&#xA;include using xevts, time based conditional action with&#xA;loot ops, and using outcomes." Deprecated="True" filter="0" group="General">
                        <Tunable name="disabled" class="TunableExistance" display="Disabled" muid="C36F4D4036D4EF86" />
                        <Tunable type="float" name="enabled" class="TunableSimMinute" default="2" display="Enabled" muid="7B673B2FB763CB48" min="None" max="None" description="The interaction will wait this amount of time after the beginning before running the element" tuning_state="NeedsTuning" Deprecated="False" filter="0" group="General" />
                    </TunableVariant>
                </TunableTuple>
                <TunableTuple name="at_end" class="TunableTuple" display="At End" muid="A802DC75A3A6D1FC" description="The behavior should occur at the end of the interaction.  It&#xA;will not be tightly synchronized visually with animation.  An&#xA;example might be an object that gets dirty every time a Sim uses&#xA;it (so using a commodity change is overkill) but no precise&#xA;synchronization with animation is desired, as might be the case&#xA;with vomiting in the toilet." Deprecated="False" filter="0" group="General">
                    <TunableEnum type="CleanupType" name="criticality" class="TunableEnumEntry" default="OnCancel" display="Criticality" muid="C78D8ECE7C488238" static_entries="element_utils.CleanupType" Deprecated="False" filter="0" group="General" />
                </TunableTuple>
                <TunableTuple name="on_xevt" class="TunableTuple" display="On Xevt" muid="9072741895B9961E" description="The behavior should occur synchronized visually with an xevt in&#xA;an animation played as part of the interaction.  If for some&#xA;reason such an event doesn't occur, the behavior will occur at&#xA;the end of the interaction unless supports failsafe is False. &#xA;&#xA;This is by far the most common use case, as when a Sim flushes &#xA;a toilet and the water level should change when the actual &#xA;flush animation and effects fire." Deprecated="False" filter="0" group="General">
                    <TunableEnum type="CleanupType" name="criticality" class="TunableEnumEntry" default="OnCancel" display="Criticality" muid="B760CAC6616539D9" static_entries="element_utils.CleanupType" Deprecated="False" filter="0" group="General" />
                    <Tunable type="bool" name="supports_failsafe" class="Tunable" default="True" display="Supports Failsafe" muid="88C5164C6A319AAA" description="If checked and the x-event does not fire,&#xA;the basic extra will still run at the end of&#xA;the interaction as a fail-safe." Deprecated="False" filter="0" group="General" />
                    <Tunable type="int" name="xevt_id" class="Tunable" default="100" display="Xevt Id" muid="825CE7C4D7295270" tuning_state="NeedsTuning" Deprecated="False" filter="0" group="General" />
                </TunableTuple>
            </TunableVariant>
        </TunableTuple>
    </Instance>

    <VersionHistory>
        <ActionList>
            <Action type="kUpdateVariantTypeField" old_muid="3564B5D3B683C272" new_muid="3564B5D3B683C272" />
        </ActionList>
    </VersionHistory>
</TuningRoot>